package main

import (
	"time"
)

/*
1.海量用户在线聊天
2.点对点聊天
3.用户登录&注册

一、服务端开发
1.用户管理
	用户id:数字
	用户密码:字母数字组合
	用户昵称:用来显示
	用户性别:字符串
	用户头像:url
	用户上线登录时间:字符串
	用户是否在线:online

	数据存储:redis hash: users

2.用户动作

	1.发送信息
	2.接收信息

3.用户注册&登录

4.用户消息离线存储
二、客户端开发

1.用户注册
2.用户登录
3.发送信息
4.获取用户列表

三、通信协议

[0:4]表示长度 常见tcp解决粘包方案1.分隔符协议，消息结尾设置分隔符2.长度协议，每个消息头设置固定长度
目前长度协议用的较多，因为分隔符协议需要 Server 不停的检测，很耗费性能。长度协议实现中比较重要的点是头部的长度以及字节序， 2 个字节可表示 2^16-1 个字节的内容，如果不够，那就上4字节，字节序相关的只是可以参考：”字节序“是什么鬼？
[]json

104
*/

func main() {
	// 创建redis.pool
	initRedis("localhost:6379",16,1024,time.Second*300)
	// 创建model.UserMgr
	initUserMgr()
	// 初始化端口
	runServer("0.0.0.0:10000")
}
